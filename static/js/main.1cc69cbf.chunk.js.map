{"version":3,"sources":["actions/chartActions.js","actions/actions.js","components/LineSwitcher/LineSwitcher.js","components/Chart/Chart.js","components/ModeButton/ModeButton.js","containers/App/App.js","reducers/chartReducer.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["sendLoading","type","sendFailure","message","error","changeRangeSUCCESS","chartTitle","data","payload","switchLineSUCCESS","switched","getDataSUCCESS","charts","getData","dispatch","fetch","method","headers","Accept","Content-Type","then","response","json","_loop2","key","currentChart","concat","colors","series_names","names","chartCols","columns","lines","x","forEach","arr","values","slice","column","Object","defineProperty","objectSpread","map","milliSec","ind","date","Date","toDateString","chart","disabled","push","formatData","formattedData","catch","err","formatAxesInput","columnKeys","keys","length","Error","keysY","filter","indexOf","y","toConsumableArray","xLength","axisX","axisY","markY","Math","ceil","max","apply","counter","step","round","xLengthFormatted","LineSwitcher","props","lineName","mode","switchLine","redrawChart","drawMiniChart","lineValue","color","dayColor","active","react_default","a","createElement","id","className","style","background","onClick","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","preventDefault","document","getElementById","backgroundColor","rangeToShow","stop","_x","this","arguments","Chart","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","xValues","minV","min","maxV","miniChartHeight","defaultMin","canvWidth","state","currentValue","getRange","bind","assertThisInitialized","markUpChart","canvElement","ctx","getContext","idt","height","_this$markUpArea","markUpArea","_this$markUpArea2","slicedToArray","lineHeight","dateWidth","width","drawLines","canvHeight","dynamicFont","strokeStyle","lineWidth","font","fillStyle","_this$props$chart$ran","axes","pointsAreaHeight","pointsAreaWidth","lineYDist","lineXDist","floor","j","i","beginPath","moveTo","fillText","lineTo","stroke","canv","range","mini","undefined","_this$props$chart","_this$props$chart2","disabledKeys","_","sortBy","tempLines","line","lineValues","reduce","line1","line2","maxValue","rangeLength","widthPart","heightValueToPx","drawLine","_len","args","Array","_key","name","dateInd","currentPos","lineCap","dot","_this2","_this$props","components_LineSwitcher_LineSwitcher","clearRect","value","getKeyByValue","changeRange","obj","find","_this$props$chart3","xKeysLength","tempMin","tempMax","maximumMin","setState","_this3","js_default","minValue","draggableTrack","onChange","onChangeInputRange","formatLabel","allowSameValues","placeLineSwitchers","React","Component","ModeButton","switchMode","App","docBodyStyle","body","components_Chart_Chart","repaintApp","displayCharts","components_ModeButton_ModeButton","connect","store","nightMode","rng","disabledNames","dateValues","tempDisabled","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","return","_loop","val","_formatAxesInput","_formatAxesInput2","rangeCopy","disabledCopy","Promise","resolve","lineToSwitch","_formatAxesInput3","_formatAxesInput4","initialState","loading","rootReducer","combineReducers","action","_action$payload","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_action$payload2","logger","createLogger","createStore","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","es","containers_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cc69cbf.chunk.js","sourcesContent":["import * as action from './actions';\r\n\r\nconst sendLoading = () => ({type: action.MAKE_LOADING});\r\nconst sendFailure = message => ({type: action.MAKE_FAILURE, error: message});\r\n\r\nconst changeRangeSUCCESS = (chartTitle, data) => ({\r\n    type: action.CHANGE_RANGE_SUCCESS, chartTitle, payload: data\r\n});\r\nconst switchLineSUCCESS = (switched, chartTitle) => ({\r\n    type: action.SWITCH_LINE_SUCCESS, payload: switched, chartTitle\r\n});\r\nconst getDataSUCCESS = data => ({\r\n    type: action.GET_DATA_SUCCESS, payload: {charts: data}\r\n});\r\n\r\nexport const switchMode = (dispatch, nightMode) => {\r\n    dispatch({type: action.SWITCH_MODE, payload: {nightMode: !nightMode}});\r\n};\r\n\r\nexport function changeRange(dispatch, chartTitle, range, axisX, lines, disabled) {\r\n    let rng = {};\r\n    const disabledNames = Object.keys(disabled);\r\n    const dateValues = [];\r\n    let tempDisabled = {};\r\n    for (let date of range) {\r\n        dateValues.push(axisX[date]);\r\n    }\r\n    for (let line in lines) {\r\n        let lineValues = dateValues.map(val => lines[line][val]);\r\n        if (disabledNames.indexOf(line) === -1) {\r\n            rng = {...rng, [line]: lineValues}\r\n        } else {\r\n            tempDisabled = {...tempDisabled, [line]: lineValues}\r\n        }\r\n    }\r\n    let [step, axes] = formatAxesInput({...rng, 'x': range});\r\n    let rangeToShow = {step, range: range, lines: rng, axes};\r\n    dispatch(changeRangeSUCCESS(chartTitle, {rangeToShow, disabled: tempDisabled}))\r\n}\r\n\r\nexport function getData(dispatch) {\r\n    dispatch(sendLoading());\r\n    fetch('chart_data.json',\r\n        {\r\n            method: \"get\",\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => formatData(data))\r\n        .then(formattedData => {\r\n            dispatch(getDataSUCCESS(formattedData))\r\n        })\r\n        .catch(err => {\r\n            dispatch(sendFailure(err.message))\r\n        });\r\n}\r\n\r\nfunction formatData(data) {\r\n    const charts = [];\r\n    for (let key in data) {\r\n        let currentChart = data[key];\r\n        let chartTitle = `chart${+key + 1}`;\r\n        let colors = currentChart.colors;\r\n        let series_names = currentChart.names;\r\n        let chartCols = currentChart.columns;\r\n        let lines = {};\r\n        let x = {};\r\n        chartCols.forEach(arr => {\r\n            let values = arr.slice(1);\r\n            let column = {[arr[0]]: values};\r\n            if (arr[0] !== 'x') {\r\n                lines = {...lines, ...column};\r\n            } else {\r\n                values.map((milliSec, ind) => {\r\n                    let date = new Date(milliSec).toDateString().slice(4, -5);\r\n                    x = {...x, [date]: ind};\r\n                });\r\n            }\r\n        });\r\n        let chart = {chartTitle, series_names, x, lines, colors, disabled: {}};\r\n        charts.push(chart)\r\n    }\r\n    return charts;\r\n}\r\n\r\nexport function switchLine(dispatch, chartTitle, lineName, rangeToShow, disabled) {\r\n    let rangeCopy = rangeToShow;\r\n    let disabledCopy = disabled;\r\n    Promise.resolve(dispatch(sendLoading()))\r\n        .then(() => {\r\n            const {lines, axes} = rangeCopy;\r\n            const {axisX} = axes;\r\n            const disabledCopyKeys = Object.keys(disabledCopy);\r\n            let lineToSwitch;\r\n            if (disabledCopyKeys.indexOf(lineName) !== -1) {\r\n                lineToSwitch = {[lineName]: disabledCopy[lineName]};\r\n                delete disabledCopy[lineName];\r\n                rangeCopy.lines = {...lines, ...lineToSwitch};\r\n            } else {\r\n                const linesKeys = Object.keys(lines);\r\n                if (linesKeys.length === 1) {\r\n                    return;\r\n                }\r\n                lineToSwitch = {[lineName]: lines[lineName]};\r\n                delete rangeCopy.lines[lineName];\r\n                disabledCopy = {...disabledCopy, ...lineToSwitch};\r\n            }\r\n            [, rangeCopy.axes] = formatAxesInput({...rangeCopy.lines, 'x': axisX});\r\n            dispatch(switchLineSUCCESS({rangeToShow: rangeCopy, disabled: disabledCopy}, chartTitle));\r\n        })\r\n        .catch(e => dispatch(sendFailure(e.message)));\r\n}\r\n\r\nfunction formatAxesInput(columns) {\r\n    let columnKeys = Object.keys(columns);\r\n    if (columnKeys.length < 2) throw new Error('Invalid input data');\r\n    let keysY = columnKeys.filter(key => key.indexOf('y') !== -1);\r\n    let y = [];\r\n    keysY.map(key => y = [...y, ...columns[key]]);\r\n    const x = columns['x'];\r\n    const xLength = x.length;\r\n    let axisX = [];\r\n    let axisY = [0,];\r\n    let markY = Math.ceil(Math.max(...y) / 6);\r\n    for (var counter = 2; counter < 7; counter++) {\r\n        axisY.push(markY * counter);\r\n    }\r\n    const step = Math.round(xLength / 6);\r\n    const rem = xLength % 6;\r\n    const xLengthFormatted = xLength - rem;\r\n    for (counter = step - 1; counter < xLengthFormatted; counter += step) {\r\n        axisX.push(x[counter]);\r\n    }\r\n    const axes = {axisX, axisY};\r\n    return [step, axes]\r\n}","export const SWITCH_MODE = 'SWITCH_MODE';\r\nexport const MAKE_LOADING = 'MAKE_LOADING';\r\nexport const MAKE_FAILURE = 'MAKE_FAILURE';\r\nexport const SWITCH_LINE_SUCCESS = 'SWITCH_LINE_SUCCESS';\r\nexport const CHANGE_RANGE_SUCCESS = 'CHANGE_RANGE_SUCCESS';\r\nexport const CHANGE_AXES = 'CHANGE_AXES';\r\nexport const GET_DATA_SUCCESS = 'GET_DATA_SUCCESS';","import React from 'react';\r\n\r\nconst LineSwitcher = props => {\r\n    const {chart, lineName, mode, switchLine, redrawChart, drawMiniChart} = props;\r\n    const {chartTitle, series_names, colors} = chart;\r\n    const lineValue = series_names[lineName];\r\n    const color = colors[lineName];\r\n    const dayColor = mode ? '#FFF' : '#000';\r\n    let active = true;\r\n    return (\r\n        <button id={`${chartTitle}-${lineName}`} className='btn line-switcher' type='button'\r\n                style={{background: color, color: dayColor}}\r\n                onClick={async e => {\r\n                    e.preventDefault();\r\n                    const but = document.getElementById(`${chartTitle}-${lineName}`);\r\n                    but.style.backgroundColor = active ? 'transparent' : color;\r\n                    active = !active;\r\n                    await switchLine(chartTitle, lineName, props.chart.rangeToShow,\r\n                        props.chart.disabled, active);\r\n                    redrawChart();\r\n                    drawMiniChart();\r\n                }}>\r\n            {lineValue}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default LineSwitcher;","import React from 'react';\r\nimport _ from 'lodash';\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css';\r\nimport LineSwitcher from '../../components/LineSwitcher/LineSwitcher.js';\r\n\r\nclass Chart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const {x} = this.props.chart;\r\n        const xValues = Object.values(x);\r\n        this.minV = Math.min(...xValues);\r\n        this.maxV = Math.max(...xValues);\r\n        this.miniChartHeight = 16 * 4; // 1 rem = 16 px\r\n        this.defaultMin = 6;\r\n        this.canvWidth = '700';\r\n        this.state = {\r\n            currentValue: {min: this.minV, max: this.minV + 6},\r\n        };\r\n        this.getRange(this.state.currentValue);\r\n        this.redrawChart = this.redrawChart.bind(this);\r\n        this.drawMiniChart = this.drawMiniChart.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.markUpChart();\r\n        this.drawMiniChart();\r\n    }\r\n\r\n    markUpChart() {\r\n        const {chartTitle} = this.props.chart;\r\n        const canvElement = document.getElementById(chartTitle);\r\n        const ctx = canvElement.getContext('2d');\r\n        const idt = Math.round(canvElement.height / 13);\r\n        const [lineHeight, dateWidth, height, width] = this.markUpArea(canvElement, ctx, idt);\r\n        this.drawLines(canvElement, height, width, idt, lineHeight, dateWidth);\r\n    }\r\n\r\n    markUpArea(canvElement, ctx, idt) {\r\n        const canvWidth = canvElement.width;\r\n        const canvHeight = canvElement.height;\r\n        const dynamicFont = Math.round(canvWidth / 50);\r\n        ctx.strokeStyle = '#c5c5c5';\r\n        ctx.lineWidth = 0.5;\r\n        ctx.font = `${dynamicFont}px Verdana`;\r\n        ctx.fillStyle = '#9e9e9e';\r\n        const {axisY, axisX} = this.props.chart.rangeToShow.axes;\r\n        const pointsAreaHeight = canvHeight - idt;\r\n        const pointsAreaWidth = canvWidth - idt;\r\n        const lineYDist = Math.round(pointsAreaHeight / 6);\r\n        const axisYMarkAboveLineIndent = 8;\r\n        const lineXDist = Math.floor(pointsAreaWidth / 6);\r\n        const axisXMarkBelowLineIndent = 20;\r\n        let j = 0;\r\n        for (let i = 0; i < 6; i++) {\r\n            const y = pointsAreaHeight - (lineYDist * i);\r\n            const x = lineXDist * i;\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, y);\r\n            ctx.fillText(axisY[i], 0, y - axisYMarkAboveLineIndent);\r\n            ctx.fillText(axisX[j], lineXDist / 4 + x + idt, pointsAreaHeight + axisXMarkBelowLineIndent);\r\n            ctx.lineTo(canvWidth, y);\r\n            ctx.stroke();\r\n            j += 1;\r\n        }\r\n        return [lineYDist, lineXDist, pointsAreaHeight, pointsAreaWidth];\r\n    }\r\n\r\n    drawLines(canv, height, width, idt, lineHeight, dateWidth, mini = false) {\r\n        const {rangeToShow, disabled} = this.props.chart;\r\n        const {axes} = rangeToShow;\r\n        const {axisY} = axes;\r\n        let lines, range, x, step = 1;\r\n        if (mini) {\r\n            ({lines, x} = this.props.chart);\r\n            const disabledKeys = Object.keys(disabled);\r\n            range = Object.values(_.sortBy(x));\r\n            let tempLines = {};\r\n            for (let line in lines) {\r\n                if (disabledKeys.indexOf(line) === -1) {\r\n                    tempLines = {...tempLines, [line]: lines[line]};\r\n                }\r\n            }\r\n            lines = {...tempLines};\r\n        } else {\r\n            ({lines, range, step} = rangeToShow);\r\n        }\r\n        const lineValues = Object.values(lines).reduce((line1, line2) => line1.concat(line2));\r\n        const maxValue = Math.max(...lineValues);\r\n        const rangeLength = range.length;\r\n        const widthPart = dateWidth / step;\r\n        const heightValueToPx = lineHeight / (mini ? Math.ceil(maxValue / 6) : axisY[1]);\r\n        for (let line in lines) {\r\n            this.drawLine(canv, line, lines[line], dateWidth, heightValueToPx,\r\n                rangeLength, widthPart, height, idt, mini);\r\n        }\r\n    }\r\n\r\n    drawLine(...args) {\r\n        const [canv, name, line, dateWidth,\r\n            heightValueToPx, rangeLength,\r\n            widthPart, height, idt, mini] = [...args];\r\n        const ctx = canv.getContext('2d');\r\n        ctx.strokeStyle = this.props.chart.colors[name];\r\n        ctx.lineWidth = mini ? 1 : rangeLength > 30 ? 2 : 3;\r\n        let dateInd = 1;\r\n        const startPosX = mini ? idt * 3 : idt + (dateWidth === widthPart ? widthPart / 2 : widthPart);\r\n        const startPosY = height - heightValueToPx * line[0];\r\n        let currentPos = [startPosX, startPosY];\r\n        ctx.beginPath();\r\n        ctx.lineCap = 'square';\r\n        while (dateInd !== rangeLength) {\r\n            const dot = line[dateInd];\r\n            if (!dot) {\r\n                dateInd++;\r\n                continue;\r\n            }\r\n            ctx.moveTo(currentPos[0], currentPos[1]);\r\n            let x = currentPos[0];\r\n            let y = height - heightValueToPx * dot;\r\n            x += widthPart;\r\n            ctx.lineTo(x, y);\r\n            currentPos = [x, y];\r\n            dateInd++;\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    placeLineSwitchers() {\r\n        const {chart, mode, switchLine} = this.props;\r\n        const {series_names} = chart;\r\n        const lineNames = Object.keys(series_names);\r\n        return lineNames\r\n            .map(line =>\r\n                <LineSwitcher key={`line-switcher-${line}`} chart={chart} mode={mode} lineName={line}\r\n                              switchLine={switchLine} redrawChart={this.redrawChart}\r\n                              drawMiniChart={this.drawMiniChart}/>\r\n            )\r\n    }\r\n\r\n    redrawChart() {\r\n        const {chartTitle} = this.props.chart;\r\n        const canvElement = document.getElementById(chartTitle);\r\n        const ctx = canvElement.getContext('2d');\r\n        ctx.clearRect(0, 0, canvElement.width, canvElement.height);\r\n        this.markUpChart();\r\n    }\r\n\r\n    getRange(value) {\r\n        const {chart} = this.props;\r\n        const {chartTitle, x, lines, disabled} = chart;\r\n        const {min, max} = value;\r\n        let range = [];\r\n        for (let i = min; i < max; i++) {\r\n            range.push(this.getKeyByValue(x, i));\r\n        }\r\n        this.props.changeRange(chartTitle, range, x, lines, disabled)\r\n    }\r\n\r\n    getKeyByValue(obj, value) {\r\n        return Object.keys(obj).find(key => obj[key] === value);\r\n    }\r\n\r\n    drawMiniChart() {\r\n        const {chartTitle, x} = this.props.chart;\r\n        const xKeysLength = Object.keys(x).length;\r\n        const canvElement = document.getElementById(`mini-${chartTitle}`);\r\n        const ctx = canvElement.getContext('2d');\r\n        const canvHeight = canvElement.height;\r\n        const canvWidth = canvElement.width;\r\n        ctx.clearRect(0, 0, canvElement.width, canvElement.height);\r\n        const idt = Math.round(canvHeight / 13);\r\n        const height = canvHeight - idt;\r\n        const width = canvWidth - idt;\r\n        const lineHeight = Math.round(height / 6);\r\n        const dateWidth = width / xKeysLength;\r\n        this.drawLines(canvElement, height, width, idt, lineHeight, dateWidth, true);\r\n    }\r\n\r\n    onChangeInputRange(currentValue) {\r\n        const tempMin = currentValue.min;\r\n        const tempMax = currentValue.max;\r\n        const maximumMin = this.maxV - this.defaultMin;\r\n        let min = tempMin < this.minV ? this.minV :\r\n            tempMin > maximumMin ? maximumMin : tempMin;\r\n        const max = tempMax > this.maxV ? this.maxV :\r\n            tempMax < this.defaultMin ? this.defaultMin : tempMax;\r\n        const tempCheckDivis = (max - min) % this.defaultMin;\r\n        min += tempCheckDivis;\r\n        currentValue = {min, max};\r\n        this.setState({currentValue});\r\n        this.getRange(currentValue);\r\n        this.redrawChart();\r\n    }\r\n\r\n    render() {\r\n        const {chartTitle} = this.props.chart;\r\n        return (\r\n            <div className=\"chart-wrapper\">\r\n                <div className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <h2 className=\"chart-title\">{chartTitle}</h2>\r\n                </div>\r\n                <div className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <canvas id={chartTitle} width={this.canvWidth} height='400'/>\r\n                </div>\r\n                <div className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <canvas id={`mini-${chartTitle}`} className=\"mini-chart\" width={this.canvWidth}\r\n                            height={this.miniChartHeight}/>\r\n                </div>\r\n                <InputRange minValue={this.minV} maxValue={this.maxV} draggableTrack={true}\r\n                            value={this.state.currentValue}\r\n                            onChange={currentValue => this.onChangeInputRange(currentValue)}\r\n                            formatLabel={() => {\r\n                            }} allowSameValues={false} step={6}/>\r\n                <div className=\"switchers-wrapper\">\r\n                    {this.placeLineSwitchers()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\nconst ModeButton = props => {\r\n    return (\r\n        <div id=\"switcher\" className=\"col-lg-12 col-md-12 col-sm-12\">\r\n            <button id='switch-mode' className=\"btn\" type='button' onClick={() => props.switchMode(props.mode)}>\r\n                Switch to {props.mode ? 'Day' : 'Night'} Mode\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModeButton;","import {connect} from 'react-redux';\r\nimport React, {Component} from 'react';\r\nimport './App.css';\r\nimport {getData} from '../../actions/chartActions';\r\nimport {changeRange} from '../../actions/chartActions.js';\r\nimport {switchMode} from '../../actions/chartActions.js';\r\nimport {switchLine} from \"../../actions/chartActions.js\";\r\nimport Chart from '../../components/Chart/Chart.js';\r\nimport ModeButton from '../../components/ModeButton/ModeButton.js';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props.getData();\r\n    }\r\n\r\n    repaintApp() {\r\n        const {mode} = this.props;\r\n        let docBodyStyle = document.body.style;\r\n        docBodyStyle.color = mode ? '#FFF' : '#000';\r\n        docBodyStyle.backgroundColor = mode ? '#1d2333' : '#FFF';\r\n    }\r\n\r\n    displayCharts(){\r\n        const {mode, charts} = this.props;\r\n        return charts.map(chart => <Chart chart={chart} mode={mode} changeRange={this.props.changeRange}\r\n                                                    switchLine={this.props.switchLine}/>);\r\n    }\r\n\r\n    render() {\r\n        this.repaintApp();\r\n        return (\r\n            <div className='container-fluid'>\r\n                <div className='row'>\r\n                    {this.displayCharts()}\r\n                    <ModeButton switchMode={this.props.switchMode} mode={this.props.mode}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        charts: store.charts.charts,\r\n        mode: store.charts.nightMode,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getData: () => getData(dispatch),\r\n        changeRange: (chartTitle, range, axisX, lines, disabled) =>\r\n            changeRange(dispatch, chartTitle, range, axisX, lines, disabled),\r\n        switchMode: mode => switchMode(dispatch, mode),\r\n        switchLine: (chartTitle, lineName, rangeToShow, disabled) =>\r\n            switchLine(dispatch, chartTitle, lineName, rangeToShow, disabled),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import * as constant from \"../actions/actions\";\r\n\r\nconst initialState = {\r\n    charts: [], // {chartTitle, series_names, axes {axisX, axisY}, lines, rangeToShow, disabled, colors}\r\n    nightMode: false,\r\n    error: false,\r\n    loading: false,\r\n};\r\n\r\nexport const chartReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case constant.MAKE_LOADING: {\r\n            return {...state, loading: true, error: false}\r\n        }\r\n\r\n        case constant.MAKE_FAILURE: {\r\n            return {...state, loading: false, error: action.error}\r\n        }\r\n\r\n        case constant.CHANGE_RANGE_SUCCESS: {\r\n            const {charts} = state;\r\n            for (let chart of charts) {\r\n                if (chart.chartTitle === action.chartTitle) {\r\n                    const {rangeToShow, disabled} = action.payload;\r\n                    chart.rangeToShow  = rangeToShow;\r\n                    chart.disabled = disabled;\r\n                    return {...state, charts};\r\n                }\r\n            }\r\n            return state\r\n        }\r\n\r\n        case constant.SWITCH_LINE_SUCCESS: {\r\n            const {charts} = state;\r\n            for (let chart of charts){\r\n                if (chart.chartTitle === action.chartTitle){\r\n                    const {rangeToShow, disabled} = action.payload;\r\n                    chart.rangeToShow = rangeToShow;\r\n                    chart.disabled = disabled;\r\n                    return {...state, charts, loading: false};\r\n                }\r\n            }\r\n            return state\r\n        }\r\n\r\n        case constant.SWITCH_MODE: {\r\n            return {...state, ...action.payload}\r\n        }\r\n\r\n        case constant.CHANGE_AXES: {\r\n            return {...state, ...action.payload}\r\n        }\r\n\r\n        case constant.GET_DATA_SUCCESS: {\r\n            return {...state, ...action.payload, loading: false}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n};","import {combineReducers} from \"redux\";\r\nimport {chartReducer} from \"./chartReducer\";\r\n\r\nexport const rootReducer = combineReducers({charts: chartReducer});","import {createStore} from \"redux\";\r\nimport {applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {createLogger} from 'redux-logger';\r\nimport {rootReducer} from '../reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport {store} from './store'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}